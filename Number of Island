class Pair{
    private:
    
    public:
    int x;
    int y;
    Pair(int x, int y)
    {
        this->x=x;
        this->y=y;
    }
};
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.empty())
            return 0;
        int m=grid.size(), n=grid[0].size();
        int count=0;
        queue<Pair> q;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1')
                {
                    count++;
                    grid[i][j]='X';
                    q.push(Pair(i, j));
                    while(!q.empty())
                    {
                        Pair position = q.front();
                        q.pop();
                        int x1 = position.x, y1=position.y;
                        int index;
                        index=x1+1;
                        if(index<m&&grid[index][y1]=='1')
                        {
                            grid[index][y1]='X';
                            q.push(Pair(index, y1));
                        }
                        index=x1-1;
                        if(index>=0&&grid[index][y1]=='1')
                        {
                            grid[index][y1]='X';
                            q.push(Pair(index, y1));
                        }
                        index=y1+1;
                        if(index<n&&grid[x1][index]=='1')
                        {
                            grid[x1][index]='X';
                            q.push(Pair(x1, index));
                        }
                        index=y1-1;
                        if(index>=0&&grid[x1][index]=='1')
                        {
                            grid[x1][index]='X';
                            q.push(Pair(x1,index));
                        }
                    }
                }
            }
        }
        return count;
    }
};
